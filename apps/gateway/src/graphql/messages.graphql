type Thread {
  id: ID!
  name: String!
  removed: Boolean!
  showNames: Boolean!
  canReply: Boolean!
  draft: Boolean!
  created: Timestamp!
  recipients: [MessageRecipient!]!
  messages: [Message!]!
}

type Message {
  id: ID!
  senderId: String!
  created: Timestamp!
  content: String
  seenBy: [String!]!
}

enum RecipientType {
  ACCOUNT
  CLASS
  GROUP
}

type MessageRecipient {
  type: RecipientType!
  id: String!
  archived: Boolean
}

type RecipientTeacher {
  id: String!
  name: String!
  subjects: [String!]!
}

type RecipientStaff {
  id: String!
  name: String!
  role: String!
}

type RecipientsResponse {
  teachers: [RecipientTeacher!]!
  staff: [RecipientStaff!]!
}

type Success {
  success: Boolean!
}

input RecipientInput {
  type: RecipientType!
  id: String!
}

input CreateThreadInput {
  name: String!
  content: String!
  showNames: Boolean!
  canReply: Boolean!
  draft: Boolean!
  recipients: [RecipientInput!]!
}

input CreateMessageInput {
  threadId: String!
  content: String!
}

input EditMessageInput {
  messageId: String!
  newContent: String!
}

type Query {
  threads: [Thread!]!
  recipients: RecipientsResponse!
}

type Mutation {
  createThread(createThreadInput: CreateThreadInput!): Thread
  markAsRead(threadId: String!): Success
  markAsUnread(threadId: String!): Success
  publishDraft(threadId: String!): Success
  deleteThread(threadId: String!): Success
  newMessage(createMessageInput: CreateMessageInput!): Message
  editMessage(editMessageInput: EditMessageInput!): Success
}

type Query {
  startLoginProcess(email: String!): StartLoginProcessResponse!
  submitChallenge(challenge: ChallengeInput!): SubmitChallengeResponse!
  startFidoSetup(email: String!): StartFidoSetupResponse!
}

type Mutation {
  respondToFidoSetup(data: Fido2ResponseInput!): Boolean!
}

type StartLoginProcessResponse {
  challenge: Challenge!
  userPhotoUri: String!
  userFirstName: String!
}

input ChallengeInput {
  id: String!
  type: ChallengeType!
  data: ChallengeData!
  userId: String!
}

type Challenge {
  id: ID!
  type: ChallengeType!
  userId: String!
}

enum ChallengeType {
  PASSWORD_NEEDED
  OTP_NEEDED
  FIDO2_NEEDED
}

input ChallengeData {
  passwordData: PasswordDataInput
  otpData: OtpDataInput
  publicKey: String
}

input PasswordDataInput {
  password: String!
}

input OtpDataInput {
  otp: String!
}

type SubmitChallengeResponse {
  user: User
  challenge: Challenge
}

type StartFidoSetupResponse {
  rp: Fido2RP!
  user: Fido2User!
  challenge: String! # Base64
  pubKeyCredParams: [Fido2PubKeyCredParam!]!
  timeout: Int!
  attestation: String!
  authenticatorSelection: Fido2AuthenticatorSelection!
}

input Fido2ResponseInput {
  publicKey: String!
  rawId: String!
  response: Fido2ClientResponse!
  type: String!
}

input Fido2ClientResponse {
  attestationObject: String!
  clientDataJSON: String!
}

type Fido2RP {
  name: String!
  id: String!
  icon: String!
}

type Fido2User {
  id: String!
  name: String!
  displayName: String!
}

type Fido2PubKeyCredParam {
  alg: Int!
  type: String!
}

type Fido2AuthenticatorSelection {
  authenticatorAttachment: String!
  requireResidentKey: Boolean!
  userVerification: String!
}
